"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = __importDefault(require("net"));
const DEFAULT_PORT = 38788;
/**
 *
 * @param port is just a suggestion.
 * there's no grantuee for the number
 *
 * The IANA suggested ephemeral port range.
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 *
 * const DEFAULT_IANA_RANGE = {min: 49152, max: 65535}
 *
 */
function getPort(port = DEFAULT_PORT) {
    let tryPort = nextPort(port);
    return new Promise(resolve => {
        // https://gist.github.com/mikeal/1840641
        function _getPort(cb) {
            const server = net_1.default.createServer();
            server.on('error', (err) => {
                if (err) { /* fail safe */ }
                tryPort = nextPort(port);
                _getPort(cb);
            });
            server.listen(tryPort, (err) => {
                if (err) { /* fail safe */ }
                server.once('close', () => {
                    cb(tryPort);
                });
                server.close();
            });
        }
        _getPort(okPort => {
            // put to the end of the event loop
            // make sure that all tasks had been done, esp. server.close()
            setImmediate(() => resolve(okPort));
        });
    });
    function nextPort(currentPort) {
        const RANGE = 1733;
        // do not use Math.random() here, because AVA will fork, then here will get the same random number, cause a race condition for socket listen
        const n = Math.floor(Math.random() * RANGE);
        /**
         * nano seconds from node: http://stackoverflow.com/a/18197438/1123955
         */
        // const [, nanoSeed] = process.hrtime()
        // const n = 1 + nanoSeed % RANGE // +1 to prevent same port
        if (currentPort + n > 65000) {
            return currentPort + n - RANGE;
        }
        return currentPort + n;
    }
}
exports.getPort = getPort;
//# sourceMappingURL=get-port.js.map