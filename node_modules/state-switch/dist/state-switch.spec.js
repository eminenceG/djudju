#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blue_tape_1 = __importDefault(require("blue-tape"));
const sinon_1 = __importDefault(require("sinon"));
const state_switch_1 = __importDefault(require("./state-switch"));
blue_tape_1.default('on()', (t) => __awaiter(this, void 0, void 0, function* () {
    const ss = new state_switch_1.default();
    t.notOk(ss.on(), 'default is not on');
    ss.on('pending');
    t.equal(ss.on(), 'pending', 'should be state pending');
    ss.on(true);
    t.equal(ss.on(), true, 'should be state true');
    t.notOk(ss.off(), 'should not off');
    ss.off(true);
    t.notOk(ss.on(), 'should not ON after off()');
}));
blue_tape_1.default('off()', (t) => __awaiter(this, void 0, void 0, function* () {
    const ss = new state_switch_1.default();
    t.ok(ss.off(), 'default is off');
    t.equal(ss.off(), true, 'should in state true');
    ss.off('pending');
    t.equal(ss.off(), 'pending', 'should be state pending');
    ss.off(true);
    t.equal(ss.off(), true, 'should be state true');
    t.notOk(ss.on(), 'should not on');
    ss.on(true);
    t.notOk(ss.off(), 'should not OFF after on()');
}));
blue_tape_1.default('pending()', (t) => __awaiter(this, void 0, void 0, function* () {
    const ss = new state_switch_1.default();
    t.notOk(ss.pending(), 'default is not pending');
    ss.on('pending');
    t.ok(ss.pending(), 'should in pending state');
    ss.on(true);
    t.notOk(ss.pending(), 'should not in pending state');
    ss.off('pending');
    t.ok(ss.pending(), 'should in pending state');
}));
blue_tape_1.default('name', (t) => __awaiter(this, void 0, void 0, function* () {
    const CLIENT_NAME = 'StateSwitchTest';
    const ss = new state_switch_1.default(CLIENT_NAME);
    t.is(ss.name(), CLIENT_NAME, 'should get the same client name as init');
}));
blue_tape_1.default('version()', t => {
    const ss = new state_switch_1.default();
    t.ok(ss.version(), 'should get version');
    t.end();
});
blue_tape_1.default('ready()', (t) => __awaiter(this, void 0, void 0, function* () {
    const spy = sinon_1.default.spy();
    const ss = new state_switch_1.default();
    ss.ready('off').then(() => spy('off'));
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 1, 'should be read off at the initial state');
    spy.resetHistory();
    ss.ready('on', true).catch(() => spy('on'));
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 1, 'should catch the exception when noCross=true');
    spy.resetHistory();
    ss.ready('on').then(() => spy('on'));
    ss.on(true);
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 1, 'should ready(on)');
    spy.resetHistory();
    ss.ready('on').then(() => spy('on'));
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 1, 'should ready(on) when already on');
    spy.resetHistory();
    ss.ready('off').then(() => spy('off'));
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 0, 'should not ready(off) when its on');
    ss.off(true);
    yield new Promise(r => setImmediate(r));
    t.equal(spy.callCount, 1, 'should ready(off) after call off(true)');
}));
//# sourceMappingURL=state-switch.spec.js.map